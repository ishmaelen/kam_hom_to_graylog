#!KAMAILIO
#
#!substdef "!HOMER_DB_USER!homer!g"
#!substdef "!HOMER_DB_PASSWORD!PW!g"
#!substdef "!HOMER_DB_HOST!127.0.0.1!g"
#!substdef "!HOMER_LISTEN_PROTO!udp!g"
#!substdef "!HOMER_LISTEN_IF!0.0.0.0!g"
#!substdef "!HOMER_LISTEN_PORT!9060!g"
#!substdef "!CHECK_TIMER_INTERVAL!20!g"
##!substdef "!ELASTICSEARCH_URL!http://127.0.0.1:9200!g"
#!substdef "!GRAYLOG_GELF_HTTP_URL!http://127.0.0.1:12201!g"

####### Global Parameters #########

debug=-2
log_stderror=no

memdbg=5
memlog=5
maxbuffer=134190336

##!define KAMAILIO_4_3
##!define WITH_HOMER_GEO
##!define TO_ELASTIC
#!define WITH_STATISTIC_METHOD_EXTRA
#!define WITH_STATISTIC_INVITE_1XX
#!define WITH_X_RTP_STATS
#!define TO_GRAYLOG

log_facility=LOG_LOCAL1

fork=yes
children=8

/* uncomment the next line to disable TCP (default on) */
disable_tcp=yes

/* IP and port for HEP capturing) */
listen=HOMER_LISTEN_PROTO:HOMER_LISTEN_IF:HOMER_LISTEN_PORT

#Max loops
max_while_loops=300
#mpath="/usr/local/lib64/kamailio/modules"
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

loadmodule "pv.so"
loadmodule "db_mysql.so"
loadmodule "sipcapture.so"
loadmodule "textops.so"
loadmodule "rtimer.so"
loadmodule "xlog.so"
loadmodule "sqlops.so"
loadmodule "htable.so"
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "siputils.so"
loadmodule "jansson.so"
loadmodule "http_async_client.so"
loadmodule "ipops.so"
loadmodule "ctl.so"
loadmodule "kex.so"

#!ifdef WITH_HOMER_GEO
loadmodule "geoip.so"
#!endif

modparam("htable", "htable", "a=>size=9;autoexpire=21")
modparam("htable", "htable", "b=>size=12;autoexpire=21")
# TODO: tune autoexpire setting for htable "c"
modparam("htable", "htable", "c=>size=8;autoexpire=21")
# ip stats
modparam("htable", "htable", "e=>size=7;autoexpire=21")
# geoip stats
modparam("htable", "htable", "f=>size=8;autoexpire=21")
# useragent stats
modparam("htable", "htable", "g=>size=9;autoexpire=21")
# alarms
modparam("htable", "htable", "h=>size=8;autoexpire=21")
# count call-id's for new sessions
modparam("htable", "htable", "i=>size=9;autoexpire=21")
# count call-id's for sessions with bye
modparam("htable", "htable", "j=>size=8;autoexpire=21")
# Warnings
modparam("htable", "htable", "w=>size=8;autoexpire=21")
#!ifdef WITH_X_RTP_STATS
modparam("htable", "htable", "x=>size=8;autoexpire=21")
#!endif
modparam("rtimer", "timer", "name=ta;interval=CHECK_TIMER_INTERVAL;mode=1;")
modparam("rtimer", "exec", "timer=ta;route=CHECK_STATS")

modparam("sqlops","sqlcon","cb=>mysql://HOMER_DB_USER:HOMER_DB_PASSWORD@127.0.0.1/homer_statistic")

# ----- mi_fifo params -----

####### Routing Logic ########
modparam("sipcapture", "db_url", "mysql://HOMER_DB_USER:HOMER_DB_PASSWORD@127.0.0.1/homer_data")
modparam("sipcapture", "capture_on", 1)
modparam("sipcapture", "hep_capture_on", 1)
modparam("sipcapture", "insert_retries", 4)
modparam("sipcapture", "insert_retry_timeout", 5)
#modparam("sipcapture", "capture_node", "homer01")

#!ifdef WITH_HOMER_GEO
modparam("geoip", "path", "/usr/share/GeoIP/GeoLiteCity.dat")
#!endif

# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
route {

	if($sht(b=>$rm::$cs::$ci) != $null) {
		#$var(a) = "sip_capture_call" + "_%Y%m%d";
		#Store
		route(STORE);
		drop;
	}

	$sht(b=>$rm::$cs::$ci) = 1;

	if (is_method("INVITE|REGISTER")) {

		if($ua =~ "(friendly-scanner|sipvicious|sipcli)") {
			$var(warning) = $ci + "=" + $fU + "=" + $tU;
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}

	#!ifdef WITH_HOMER_GEO
		if(geoip_match("$si", "src")) {
			$var(key) = $rm + "=" + $gip(src=>cc) + "=" + $gip(src=>lat) + "=" + $gip(src=>lon);
			if($sht(f=>$var(key)) != $null) {
				$sht(f=>$var(key)) = 0;
			}
			$sht(f=>$var(key)) = $sht(f=>$var(key)) + 1;
		}
	#!endif

		if($au != $null) $var(anumber) = $au;
		else $var(anumber) = $fU;

		if($(var(anumber){s.substr,0,5}) == "+204231") {
			$var(warning) = $ci + "=" + $fU + "=" + $tU;
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}

		if($(rU{s.substr,0,5}) == "+204231") {
			$var(warning) = $ci + "=" + $fU + "=" + $tU;
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}

		#if($sel(contact.uri.host) =~ "^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))$") {
		if($sel(contact.uri.host) =~ "^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$") {
			$var(warning) = $ci + "=" + $fU + "=" + $tU;
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}

		if($sel(contact.uri.host) != $si) {
			$var(warning) = $ci + "=" + $fU + "=" + $tU;
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}

		if($au =~ "(\=)|(\-\-)|(\')|(\#)|(\%27)|(\%24)") {
			$var(warning) = $ci + "=" + $fU + "=" + $tU;
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}

		if($(hdr(Record-Route)[0]{nameaddr.uri}) != $si) {
			$var(warning) = $ci + "=" + $fU + "=" + $tU;
			if($sht(w=>$var(warning)) != $null) $sht(w=>$var(warning)) = 0;
			$sht(w=>$var(warning)) = $sht(w=>$var(warning)) + 1;
		}

		if (is_method("INVITE")) {
			$sht(i=>$ci) = 1;
			if (has_totag()) {
				if($sht(e=>REINVITE) == $null) $sht(e=>REINVITE) = 0;
				$sht(e=>REINVITE) = $sht(e=>REINVITE) + 1;
			}
			else {
				if($sht(e=>INVITE) == $null) $sht(e=>INVITE) = 0;
				$sht(e=>INVITE) = $sht(e=>INVITE) + 1;
				if($adu != $null) {
					if($sht(e=>INVITE-AUTH) == $null) $sht(e=>INVITE-AUTH) = 0;
					$sht(e=>INVITE-AUTH) = $sht(e=>INVITE-AUTH) + 1;
				}
			}
		}
		else {
			if($sht(e=>REGISTER) == $null) $sht(e=>REGISTER) = 0;
			$sht(e=>REGISTER) = $sht(e=>REGISTER) + 1;
			if($adu != $null) {
				if($sht(e=>REGISTER-AUTH) == $null) $sht(e=>REGISTER-AUTH) = 0;
				$sht(e=>REGISTER-AUTH) = $sht(e=>REGISTER-AUTH) + 1;
			}
		}
	}
	else if(is_method("BYE")) {
		$sht(j=>$ci) = 1;
		if(is_present_hf("Reason")) {
			$var(cause) = $(hdr(Reason){param.value,cause}{s.int});
			if($var(cause) != 16 && $var(cause) !=17) {
				if($sht(a=>stats::sdf) == $null) $sht(a=>stats::sdf) = 0;
				$sht(a=>stats::sdf) = $sht(a=>stats::sdf) + 1;
			}
		}
	}
	else if(is_method("PUBLISH")) {
		if($cT == "application/vq-rtcpxr" && $(rb{s.substr,0,1}) != "x") {
			$var(table) = "report_capture";
			#$var(callid) = $(rb{re.subst,/(.*)CallID:([0-9A-Za-z_.@-]{5,120})(.*)$/\2/s});
			$var(callid) = $(rb{re.subst,/.*CallID:([0-9A-Za-z@-_\.]{5,120}).*$/\1/s});
			report_capture("$var(table)", "$var(callid)", "$mb");
			#report_capture("$var(table)", "$var(callid)");
			drop;
		}
	}
	else if (is_method("ACK|BYE|CANCEL|INFO|MESSAGE|NOTIFY|OPTIONS|PRACK|PUBLISH|REFER|SUBSCRIBE|UPDATE")) {
		if($sht(e=>$rm) == $null) $sht(e=>$rm) = 0;
		$sht(e=>$rm) = $sht(e=>$rm) + 1;
	}
	else {
		if($sht(e=>UNKNOWN) == $null) $sht(e=>UNKNOWN) = 0;
		$sht(e=>UNKNOWN) = $sht(e=>UNKNOWN) + 1;
	}

#!ifdef WITH_X_RTP_STATS
	if(is_method("BYE") && $(hdr(X-RTP-Stat)) != $null) route(PARSE_X_RTP_STATS);
#!endif

	#Store
	route(STORE);
	drop;
}

onreply_route {

	if($sht(b=>$rs::$cs::$rm::$ci) != $null) {
		#Store
		route(STORE);
		drop;
	}

	$sht(b=>$rs::$cs::$rm::$ci) = 1;

	#Status codes
	if(status =~ "[1-7][0-9][0-9]") {
		if($sht(g=>$rs) == $null) $sht(g=>$rs) = 0;
		$sht(g=>$rs) = $sht(g=>$rs) + 1;
	}

	# MOVED
	if(status =~ "^(30[012])$") {
		if($sht(a=>response::300) == $null) $sht(a=>response::300) = 0;
		$sht(a=>response::300) = $sht(a=>response::300) + 1;
	}

	if($rm == "INVITE") {
		$sht(i=>$ci) = 1;
		#ISA
		if(status =~ "^(408|50[034])$") {
			if($sht(a=>stats::isa) == $null) $sht(a=>stats::isa) = 0;
			$sht(a=>stats::isa) = $sht(a=>stats::isa) + 1;
		}
		#Bad486
		if(status =~ "^(486|487|603)$") {
			if($sht(a=>stats::bad::invite) == $null) $sht(a=>stats::bad::invite) = 0;
			$sht(a=>stats::bad::invite) = $sht(a=>stats::bad::invite) + 1;
		}
		#SD
		if(status =~ "^(50[034])$") {
			if($sht(a=>stats::sd) == $null) $sht(a=>stats::sd) = 0;
			$sht(a=>stats::sd) = $sht(a=>stats::sd) + 1;
		}
		# 488 not accteptable here
		if(status == "488") {
			if($sht(a=>response::488::invite) == $null) $sht(a=>response::488::invite)= 0;
			$sht(a=>response::488::invite) = $sht(a=>response::488::invite) + 1;
		}
		if(status == "407") {
			if($sht(a=>response::407::invite) == $null) $sht(a=>response::407::invite)= 0;
			$sht(a=>response::407::invite) = $sht(a=>response::407::invite) + 1;
		}
		else if(status == "401") {
			if($sht(a=>response::401::invite) == $null) $sht(a=>response::401::invite)= 0;
			$sht(a=>response::401::invite) = $sht(a=>response::401::invite) + 1;
		}
		else if(status == "200") {
			if($sht(a=>response::200::invite) == $null) $sht(a=>response::200::invite)= 0;
			$sht(a=>response::200::invite) = $sht(a=>response::200::invite) + 1;
		}
		#Aditional stats
	#!ifdef WITH_STATISTIC_INVITE_1XX
		else if(status == "100") {
			if($sht(a=>response::100::invite) == $null) $sht(a=>response::100::invite)= 0;
			$sht(a=>response::100::invite) = $sht(a=>response::100::invite) + 1;
		}
		else if(status == "180") {
			if($sht(a=>response::180::invite) == $null) $sht(a=>response::180::invite)= 0;
			$sht(a=>response::180::invite) = $sht(a=>response::180::invite) + 1;
		}
		else if(status == "183") {
			if($sht(a=>response::183::invite) == $null) $sht(a=>response::183::invite)= 0;
			$sht(a=>response::183::invite) = $sht(a=>response::183::invite) + 1;
		}
	#!endif
	}
	else if($rm == "BYE") {
		$sht(j=>$ci) = 1;
		if(status == "407") {
			if($sht(a=>response::407::bye) == $null) $sht(a=>response::407::bye) = 0;
			$sht(a=>response::407::bye) = $sht(a=>response::407::bye) + 1;
		}
		else if(status == "401") {
			if($sht(a=>response::401::bye) == $null) $sht(a=>response::401::bye) = 0;
			$sht(a=>response::401::bye) = $sht(a=>response::401::bye) + 1;
		}
		else if(status == "200") {
			if($sht(a=>response::200::bye) == $null) $sht(a=>response::200::bye) = 0;
			$sht(a=>response::200::bye) = $sht(a=>response::200::bye) + 1;
		}
	}

#!ifdef WITH_X_RTP_STATS
	if(($rm == "BYE" || status == "200") && $(hdr(X-RTP-Stat)) != $null) route(PARSE_X_RTP_STATS);
#!endif

	#Store
	route(STORE);
	drop;
}

#!ifdef WITH_X_RTP_STATS
route[PARSE_X_RTP_STATS] {

	if($sht(x=>$ci::$tt)>=1) {
		return;
	}

	if(($(hdr(X-RTP-Stat)) != $null)) {

		$var(xrtp_stats) = "";
		$var(type) 	= "x-rtp-stats";
		$var(XHEAD)	= $(hdr(X-RTP-Stat));
		$var(CS)	= 0;
		$var(PS)	= 0;
		$var(ES)	= 0;
		$var(OS)	= 0;
		$var(NPS)	= 0;
		$var(SPS)	= 0;
		$var(SO)	= 0;
		$var(QS)	= 0;
		$var(PR)	= 0;
		$var(ER)	= 0;
		$var(OR)	= 0;
		$var(NPR)	= 0;
		$var(SR)	= 0;
		$var(QR)	= 0;
		$var(PLR)	= 0;
		$var(PLS)	= 0;
		$var(BL)	= 0;
		$var(LS)	= 0;
		$var(RBDU)	= 0;
		$var(RBDE)	= 0;
		$var(SBDU)	= 0;
		$var(SBDE)	= 0;
		$var(EN)	= "";
		$var(DE)	= "";
		$var(JIR)	= 0;
		$var(JIS)	= 0;
		$var(DLME)	= 0;
		$var(DLMI)	= 0;
		$var(DLMA)	= 0;
		$var(LIP)	= "";
		$var(RIP)	= "";
		$var(DQ)	= 0;
		$var(DSS)	= 0;
		$var(DS)	= 0;
		$var(PLCS)	= 0;
		$var(JS)	= 0;
		$var(RLoss)	= 0;
		$var(ELACY)	= 0;
		$var(RVal)	= 0;
		$var(MOS)	= 0;

		if($var(XHEAD) =~ ".*CS=[0-9]") $var(CS)	= $(var(XHEAD){re.subst,/.*CS=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*PS=[0-9]") $var(PS)	= $(var(XHEAD){re.subst,/.*PS=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*ES=[0-9]") $var(ES)	= $(var(XHEAD){re.subst,/.*ES=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*OS=[0-9]") $var(OS)	= $(var(XHEAD){re.subst,/.*OS=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*SP=[0-9]") $var(NPS)	= $(var(XHEAD){re.subst,/.*SP=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*SP=[0-9]") $var(SPS)	= $(var(XHEAD){re.subst,/.*SP=([0-9]+)\/([0-9]+).*$/\2/s});
		if($var(XHEAD) =~ ".*SO=[0-9]") $var(SO)	= $(var(XHEAD){re.subst,/.*SO=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*QS=[0-9]|[\-]") $var(QS)	= $(var(XHEAD){re.subst,/.*QS=([0-9]|[\-]+).*$/\1/s});
		if($var(XHEAD) =~ ".*PR=[0-9]") $var(PR)	= $(var(XHEAD){re.subst,/.*PR=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*ER=[0-9]") $var(ER)	= $(var(XHEAD){re.subst,/.*ER=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*OR=[0-9]") $var(OR)	= $(var(XHEAD){re.subst,/.*OR=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*CR=[0-9]") $var(NPR)	= $(var(XHEAD){re.subst,/.*CR=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*SR=[0-9]") $var(SR)	= $(var(XHEAD){re.subst,/.*SR=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*QR=[0-9]|[\-]") $var(QR)	= $(var(XHEAD){re.subst,/.*QR=([0-9]|[\-]+).*$/\1/s});
		if($var(XHEAD) =~ ".*PL=[0-9]") $var(PLR)	= $(var(XHEAD){re.subst,/.*PL=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*PL=[0-9]") $var(PLS)	= $(var(XHEAD){re.subst,/.*PL=([0-9]+)\,([0-9]+).*$/\2/s});
		if($var(XHEAD) =~ ".*BL=[0-9]") $var(BL)	= $(var(XHEAD){re.subst,/.*BL=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*LS=[0-9]") $var(LS)	= $(var(XHEAD){re.subst,/.*LS=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*RB=[0-9]|[\-]") $var(RBDU)	= $(var(XHEAD){re.subst,/.*RB=([0-9]+|[\-]).*$/\1/s});
		if($var(XHEAD) =~ ".*RB=[0-9]|[\-]") $var(RBDE)	= $(var(XHEAD){re.subst,/.*RB=([0-9]+|[\-])\/([0-9]|[\-]+).*$/\2/s});
		if($var(XHEAD) =~ ".*SB=[0-9]|[\-]") $var(SBDU)	= $(var(XHEAD){re.subst,/.*SB=([0-9]+|[\-]).*$/\1/s});
		if($var(XHEAD) =~ ".*SB=[0-9]|[\-]") $var(SBDE)	= $(var(XHEAD){re.subst,/.*SB=([0-9]+|[\-])\/([0-9]|[\-]+).*$/\2/s});
		if($var(XHEAD) =~ ".*EN=[A-Za-z0-9]") $var(EN)	= $(var(XHEAD){re.subst,/.*EN=([A-Za-z0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*DE=[A-Za-z0-9]") $var(DE)	= $(var(XHEAD){re.subst,/.*DE=([A-Za-z0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*JI=[0-9]") $var(JIR)	= $(var(XHEAD){re.subst,/.*JI=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*JI=[0-9]") $var(JIS)	= $(var(XHEAD){re.subst,/.*JI=([0-9]+)\,([0-9]+).*$/\2/s});
		if($var(XHEAD) =~ ".*DL=[0-9]") $var(DLME)	= $(var(XHEAD){re.subst,/.*DL=([0-9]+).*$/\1/s});
		if($var(XHEAD) =~ ".*DL=[0-9]") $var(DLMI)	= $(var(XHEAD){re.subst,/.*DL=([0-9]+)\,([0-9]+).*$/\2/s});
		if($var(XHEAD) =~ ".*DL=[0-9]") $var(DLMA)	= $(var(XHEAD){re.subst,/.*DL=([0-9]+)\,([0-9]+)\,([0-9]+).*$/\3/s});
		if($var(XHEAD) =~ ".*IP=[0-9]") $var(LIP)	= $(var(XHEAD){re.subst,/.*IP=([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}).*$/\1/s});
		if($var(XHEAD) =~ ".*IP=[0-9]") $var(RIP)	= $(var(XHEAD){re.subst,/.*IP=([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\:[0-9]+)\,([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}).*$/\2/s});
		if ($var(QS) == "-") $var(QS)	= 0;
		if ($var(QR) == "-") $var(QR)	= 0;
		if ($var(RBDU) == "-") $var(RBDU)	= 0;
		if ($var(RBDE) == "-") $var(RBDE)	= 0;
		if ($var(SBDU) == "-") $var(SBDU)	= 0;
		if ($var(SBDE) == "-") $var(SBDE)	= 0;


		# Since kamailio core cannot handle float values we shift them by 10^3
		$var(RLoss)	= ((($var(PLR) + $var(PLS)) * 250000) / ($var(PS) + $var(PR)));
		$var(ELACY)	= ((($var(JIR) * 2) + $var(DLMI) + 20) * 1000);

		if ($var(ELACY) < 160000) {
			$var(RVal) = (93200 - ($var(ELACY) / 40));
		}
		else {
			$var(RVal) = (93200 - (($var(ELACY) - 120000) / 10));
		}

		$var(RVal)	= $var(RVal) - $var(RLoss);
		$var(MOS1)	= ((($var(RVal) / 1000) * 35) + 1000);
		$var(MOS2)	= (100000 - $var(RVal)) * ($var(RVal) - 60000);
		$var(MOS3)	= $var(MOS2) / 142857;
		$var(MOS4)	= ($var(MOS3) * $var(RVal)) / 1000000;
		$var(MOS)	= $var(MOS1) + $var(MOS4);

		#xlog("R=$var(RVal) MOS1=$var(MOS1) MOS2=$var(MOS2) MOS3=$var(MOS3) MOS4=$var(MOS4) MOS=$var(MOS)");

		if ($var(MOS) < 1000) $var(MOS) = 1000;

		if(($(hdr(X-RTP-Stat-Add)) != $null)){
			$var(XADD) = $(hdr(X-RTP-Stat-Add));
			if($var(XADD) =~ ".*DQ=[0-9]") $var(DQ) = $(var(XADD){re.subst,/.*DQ=([0-9]+).*$/\1/s});
			if($var(XADD) =~ ".*DSS=[0-9]") $var(DSS) = $(var(XADD){re.subst,/.*DSS=([0-9]+).*$/\1/s});
			if($var(XADD) =~ ".*DS=[0-9]") $var(DS) = $(var(XADD){re.subst,/.*DS=([0-9]+).*$/\1/s});
			if($var(XADD) =~ ".*PLCS=[0-9]") $var(PLCS) = $(var(XADD){re.subst,/.*PLCS=([0-9]+).*$/\1/s});
			if($var(XADD) =~ ".*JS=[0-9]") $var(JS) = $(var(XADD){re.subst,/.*JS=([0-9]+).*$/\1/s});
		}
		jansson_set("string", "host", "$HN(n)", "$var(tmp_json)");
		jansson_set("string", "ID", "$ci", "$var(tmp_json)");
		jansson_set("string", "From", "$fU", "$var(tmp_json)");
		jansson_set("string", "To", "$tU", "$var(tmp_json)");
		jansson_set("integer", "CallSetupTime", "$var(CS)", "$var(tmp_json)");
		jansson_set("integer", "AudioPacketsSent", "$var(PS)", "$var(tmp_json)");
		jansson_set("integer", "ExpectedPacketsSent", "$var(ES)", "$var(tmp_json)");
		jansson_set("integer", "AudioOctetsSent", "$var(OS)", "$var(tmp_json)");
		jansson_set("integer", "ComfortNoisePacketsSent", "$var(NPS)", "$var(tmp_json)");
		jansson_set("integer", "SilencePacketsSent", "$var(SPS)", "$var(tmp_json)");
		jansson_set("integer", "SilenceOctetsSent", "$var(SO)", "$var(tmp_json)");
		jansson_set("integer", "QuietPacketsSent", "$var(QS)", "$var(tmp_json)");
		jansson_set("integer", "AudioPacketsReceived", "$var(PR)", "$var(tmp_json)");
		jansson_set("integer", "ExpectedPacketsReceived", "$var(ER)", "$var(tmp_json)");
		jansson_set("integer", "AudioOctetsReceived", "$var(OR)", "$var(tmp_json)");
		jansson_set("integer", "ComfortNoisePacketsReceived", "$var(NPR)", "$var(tmp_json)");
		jansson_set("integer", "ComfortNoiseOctetsReceived", "$var(SR)", "$var(tmp_json)");
		jansson_set("integer", "QuietPacketsReceived", "$var(QR)", "$var(tmp_json)");
		jansson_set("integer", "ReceivePacketsLost", "$var(PLR)", "$var(tmp_json)");
		jansson_set("integer", "SendPacketsLost", "$var(PLS)", "$var(tmp_json)");
		jansson_set("integer", "ReceiveMaxBurstLost", "$var(BL)", "$var(tmp_json)");
		jansson_set("integer", "NumLostSequences", "$var(LS)", "$var(tmp_json)");
		jansson_set("integer", "ReceiveBurstDuration", "$var(RBDU)", "$var(tmp_json)");
		jansson_set("integer", "ReceiveBurstDensity", "$var(RBDE)", "$var(tmp_json)");
		jansson_set("integer", "SendBurstDuration", "$var(SBDU)", "$var(tmp_json)");
		jansson_set("integer", "SendBurstDensity", "$var(SBDE)", "$var(tmp_json)");
		jansson_set("string", "UsedEncoder", "$var(EN)", "$var(tmp_json)");
		jansson_set("string", "UsedDecoder", "$var(DE)", "$var(tmp_json)");
		jansson_set("integer", "ReceiveJitter", "$var(JIR)", "$var(tmp_json)");
		jansson_set("integer", "SendJitter", "$var(JIS)", "$var(tmp_json)");
		jansson_set("integer", "RttMean", "$var(DLME)", "$var(tmp_json)");
		jansson_set("integer", "RttMin", "$var(DLMI)", "$var(tmp_json)");
		jansson_set("integer", "RttMax", "$var(DLMA)", "$var(tmp_json)");
		jansson_set("string", "LocalIP", "$var(LIP)", "$var(tmp_json)");
		jansson_set("string", "RemoteIP", "$var(RIP)", "$var(tmp_json)");
		jansson_set("integer", "Mos", "$var(MOS)", "$var(tmp_json)");
		jansson_set("integer", "DecoderQueue", "$var(DQ)", "$var(tmp_json)");
		jansson_set("integer", "DropSilenceSample", "$var(DSS)", "$var(tmp_json)");
		jansson_set("integer", "DropSamples", "$var(DS)", "$var(tmp_json)");
		jansson_set("integer", "PLCSamples", "$var(PLCS)", "$var(tmp_json)");
		jansson_set("integer", "JitterSamples", "$var(JS)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		jansson_set("string", "timestamp", "$timef(%Y-%m-%dT%TZ)", "$var(tmp_json)");
		$var(xrtp_stats) = $var(xrtp_stats) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(xrtp_stats) = $var(xrtp_stats) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		$var(body) = $var(xrtp_stats);
		route(SEND_ES_DATA);
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$TS+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "X-RTP-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif

		if($sht(x=>$ci::$tt) == $null) $sht(x=>$ci::$tt) = 0;
		$sht(x=>$ci::$tt) = $sht(x=>$ci::$tt) + 1;
	}
}
#!endif

route[STATS_BY_IP] {
	if($sht(c=>$rs::$sel(via[1].host)) == $null) $sht(c=>$rs::$sel(via[1].host)) = 0;
	$sht(c=>$rs::$sel(via[1].host)) = $sht(c=>$rs::$sel(via[1].host)) + 1;
}

route[PARSE_STATS_IP] {

	$var(alarm_data) = "";
	$var(type) = "alarm_data";
	sht_iterator_start("i1", "c");
	while(sht_iterator_next("i1")) {
		$var(sipcode) = $(shtitkey(i1){s.select,0,:});
		$var(ip) = $(shtitkey(i1){s.select,2,:});
		if($shtitval(i1) > $avp($var(sipcode))) {
			jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
			jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
			jansson_set("string", "source_ip", "$var(ip)", "$var(tmp_json)");
			jansson_set("string", "type", "Too Many $var(sipcode)", "$var(tmp_json)");
			jansson_set("integer", "value", "$shtitval(i1)", "$var(tmp_json)");

			#!ifdef TO_ELASTIC
			$var(alarm_data) = $var(alarm_data) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
			$var(alarm_data) = $var(alarm_data) + $var(tmp_json) + "\n";
			$var(tmp_json) = 0;
			#!endif

			#!ifdef TO_GRAYLOG
			jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
			jansson_set("string", "short_message", "Homer-Alarm", "$var(tmp_json)");
			$var(graylog_json) = $var(tmp_json);
			$var(tmp_json) = 0;
			route(SEND_ES_DATA);
			$var(graylog_json) = 0;
			#!endif
		}
	}
	sht_iterator_end("i1");
	sht_rm_name_re("c=>.*");

	$var(body) = $var(alarm_data);
	route(SEND_ES_DATA);
}

route[CHECK_STATS] {
	$var(curtime) = $TS;
	$var(gentime) = $var(curtime) - CHECK_TIMER_INTERVAL;

	$var(t_mdate) = "FROM_UNIXTIME(" + $var(curtime) + ", '%Y-%m-%d %H:%i:00')";
	$var(f_mdate) = "FROM_UNIXTIME(" + $var(gentime) + ", '%Y-%m-%d %H:%i:00')";

	$var(isotime) = $timef(%Y-%m-%dT%TZ);
	$var(host) = $HN(n);

	$var(stats_useragent) = "";
	$var(type) = "stats_useragent";

	sht_iterator_start("i1", "g");
	while(sht_iterator_next("i1")) {
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "useragent", "$var(ua)", "$var(tmp_json)");
		jansson_set("string", "method", "$shtitkey(i1)", "$var(tmp_json)");
		jansson_set("integer", "value", "$shtitval(i1)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_useragent) = $var(stats_useragent) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_useragent) = $var(stats_useragent) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif
	}

	sht_iterator_end("i1");

	$var(body) = $var(stats_useragent);
	route(SEND_ES_DATA);

	#STATS IP
	$var(stats_ip) = "";
	$var(type) = "stats_ip";

	sht_iterator_start("i1", "e");
	while(sht_iterator_next("i1")) {
		$var(ip) = $(shtitkey(i1){s.select,0,-});
		$var(method) = $(shtitkey(i1){s.select,1,-});
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "source_ip", "$var(ip)", "$var(tmp_json)");
		jansson_set("string", "response", "$shtitkey(i1)", "$var(tmp_json)");
		jansson_set("integer", "value", "$shtitval(i1)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_ip) = $var(stats_ip) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_ip) = $var(stats_ip) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif
	}

	sht_iterator_end("i1");

	$var(body) = $var(stats_ip);
	route(SEND_ES_DATA);

	$var(alarm_data) = "";
	$var(type) = "alarm_data";

	sht_iterator_start("i1", "w");
	while(sht_iterator_next("i1")) {
		if ($shtitval(i1) >= $var(avalue)) {
			$var(id) = $(shtitkey(i1){s.select,0,=});
			$var(from) = $(shtitkey(i1){s.select,1,=});
			$var(to) = $(shtitkey(i1){s.select,2,=});
			jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
			jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
			jansson_set("string", "ID", "$var(id)", "$var(tmp_json)");
			jansson_set("string", "FROM", "$var(from)", "$var(tmp_json)");
			jansson_set("string", "TO", "$var(to)", "$var(tmp_json)");
			jansson_set("string", "type", "scanner", "$var(tmp_json)");
			jansson_set("integer", "value", "$shtitval(i1)", "$var(tmp_json)");

			#!ifdef TO_ELASTIC
			$var(alarm_data) = $var(alarm_data) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
			$var(alarm_data) = $var(alarm_data) + $var(tmp_json) + "\n";
			$var(tmp_json) = 0;
			#!endif

			#!ifdef TO_GRAYLOG
			jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
			jansson_set("string", "short_message", "Homer-Scanner", "$var(tmp_json)");
			$var(graylog_json) = $var(tmp_json);
			$var(tmp_json) = 0;
			route(SEND_ES_DATA);
			$var(graylog_json) = 0;
			#!endif
		}
	}

	sht_iterator_end("i1");

	$var(body) = $var(alarm_data);
	route(SEND_ES_DATA);

#!ifdef WITH_HOMER_GEO
	$var(stats_geo) = "";
	$var(type) = "stats_geo";

	sht_iterator_start("i1", "f");
	while(sht_iterator_next("i1")) {
		$var(method) = $(shtitkey(i1){s.select,0,=});
		$var(country) = $(shtitkey(i1){s.select,1,=});
		$var(lat) = $(shtitkey(i1){s.select,2,=});
		$var(lon) = $(shtitkey(i1){s.select,3,=});
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "country", "$var(country)", "$var(tmp_json)");
		jansson_set("string", "method", "$var(method)", "$var(tmp_json)");
		jansson_set("string", "location_geo", "$var(lat), $var(lon)", "$var(tmp_json)");
		jansson_set("integer", "value", "$shtitval(i1)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_geo) = $var(stats_geo) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_geo) = $var(stats_geo) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif
	}

	sht_iterator_end("i1");
	sht_rm_name_re("f=>.*");

	$var(body) = $var(stats_geo);
	route(SEND_ES_DATA);
#!endif

	$var(tmp_json) = 0;
	#INSERT SQL STATS
	#Packet HEP stats
	$var(stats_data) = "";
	$var(type) = "stats_data";

	#ASR
	$var(asr) = 0;
	#if($sht(a=>response::200::invite) > 0) {
	if($sht(e=>INVITE) > 0) {
		if($sht(a=>response::407::invite) == $null) $sht(a=>response::407::invite) = 0;
		if($sht(a=>response::200::invite) == $null) $sht(a=>response::200::invite) = 0;
		$var(d) = $sht(e=>INVITE) - $sht(a=>response::407::invite);
		if($var(d) > 0) {
			$var(asr) =	$sht(a=>response::200::invite) * 100 / $var(d);
			if($var(asr) > 100)	$var(asr) = 100;
		}
	}

	#Stats DATA
	jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
	jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
	jansson_set("string", "name", "asr", "$var(tmp_json)");
	jansson_set("integer", "value", "$var(asr)", "$var(tmp_json)");

	#!ifdef TO_ELASTIC
	$var(stats_data) = $var(stats_data) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
	$var(stats_data) = $var(stats_data) + $var(tmp_json) + "\n";
	$var(tmp_json) = 0;
	#!endif

	#!ifdef TO_GRAYLOG
	jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
	jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
	$var(graylog_json) = $var(tmp_json);
	$var(tmp_json) = 0;
	route(SEND_ES_DATA);
	$var(graylog_json) = 0;
	#!endif

	#NER
	$var(ner) = 0;
	#if($sht(a=>response::200::invite) > 0 || $sht(a=>stats::bad::invite) > 0) {
	if($sht(e=>INVITE) > 0) {

		if($sht(a=>response::200::invite) == $null) $sht(a=>response::200::invite) = 0;
		if($sht(a=>response::bad::invite) == $null) $sht(a=>response::bad::invite) = 0;
		if($sht(a=>response::407::invite) == $null) $sht(a=>response::407::invite) = 0;

		$var(d) = $sht(e=>INVITE) - $sht(a=>response::407::invite);

		if($var(d) > 0) {
			$var(ner) = ($sht(a=>response::200::invite) + $sht(a=>stats::bad::invite)) * 100 / $var(d);
			if($var(ner) > 100)	$var(ner) = 100;
		}
	}

	jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
	jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
	jansson_set("string", "name", "ner", "$var(tmp_json)");
	jansson_set("integer", "value", "$var(ner)", "$var(tmp_json)");

	#!ifdef TO_ELASTIC
	$var(stats_data) = $var(stats_data) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
	$var(stats_data) = $var(stats_data) + $var(tmp_json) + "\n";
	$var(tmp_json) = 0;
	#!endif

	#!ifdef TO_GRAYLOG
	jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
	jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
	$var(graylog_json) = $var(tmp_json);
	$var(tmp_json) = 0;
	route(SEND_ES_DATA);
	$var(graylog_json) = 0;
	#!endif

	#SDR
	$var(sdr) = 0;
	if($sht(e=>INVITE) > 0) {
		if($sht(a=>response::407::invite) == $null) $sht(a=>response::407::invite) = 0;
		$var(d) = $sht(e=>INVITE) - $sht(a=>response::407::invite);

		if($var(d) > 0) {
			$var(sdr) = $sht(a=>stats::sd) * 100 / $var(d);
			if($var(sdr) > 100)	$var(sdr) = 100;
		}
	}

	jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
	jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
	jansson_set("string", "name", "sdr", "$var(tmp_json)");
	jansson_set("integer", "value", "$var(sdr)", "$var(tmp_json)");

	#!ifdef TO_ELASTIC
	$var(stats_data) = $var(stats_data) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
	$var(stats_data) = $var(stats_data) + $var(tmp_json) + "\n";
	$var(tmp_json) = 0;
	#!endif

	#!ifdef TO_GRAYLOG
	jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
	jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
	$var(graylog_json) = $var(tmp_json);
	$var(tmp_json) = 0;
	route(SEND_ES_DATA);
	$var(graylog_json) = 0;
	#!endif

	#SCR
	$var(scr) = 0;
	if($shtcn(i=>**) > 0 && $shtcn(j=>**) > 0 ) {
		# completed sessions with bye * 100 / all session invites
		$var(scr) = $shtcn(j=>**) * 100 / $shtcn(i=>**);
		if($var(scr) > 100)	$var(scr) = 100;
	}

	jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
	jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
	jansson_set("string", "name", "scr", "$var(tmp_json)");
	jansson_set("integer", "value", "$var(scr)", "$var(tmp_json)");

	#!ifdef TO_ELASTIC
	$var(stats_data) = $var(stats_data) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
	$var(stats_data) = $var(stats_data) + $var(tmp_json) + "\n";
	$var(tmp_json) = 0;
	#!endif

	#!ifdef TO_GRAYLOG
	jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
	jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
	$var(graylog_json) = $var(tmp_json);
	$var(tmp_json) = 0;
	route(SEND_ES_DATA);
	$var(graylog_json) = 0;
	#!endif

	# Send bulk stats metrics
	$var(body) = $var(stats_data);
	route(SEND_ES_DATA);

	$var(stats_method) = "";
	$var(type) = "stats_method";

	# Reset call-id's associated with invite & bye message
	sht_reset("e");
	sht_reset("f");
	sht_reset("g");
	sht_reset("i");
	sht_reset("j");
	sht_reset("w");


	#RESPONSES with cseq

	#407 INVITE
	if($sht(a=>response::407::invite) > 0) {
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "response", "407", "$var(tmp_json)");
		jansson_set("string", "cseq", "INVITE", "$var(tmp_json)");
		jansson_set("integer", "value", "$sht(a=>response::407::invite)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_method) = $var(stats_method) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_method) = $var(stats_method) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif

		$sht(a=>response::407::invite) = 0;
	}

	#401 INVITE
	if($sht(a=>response::401::invite) > 0) {
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "response", "401", "$var(tmp_json)");
		jansson_set("string", "cseq", "INVITE", "$var(tmp_json)");
		jansson_set("integer", "value", "$sht(a=>response::401::invite)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_method) = $var(stats_method) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_method) = $var(stats_method) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif

		$sht(a=>response::401::invite) = 0;
	}

	#488 INVITE
	if($sht(a=>response::488::invite) > 0) {
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "response", "488", "$var(tmp_json)");
		jansson_set("string", "cseq", "INVITE", "$var(tmp_json)");
		jansson_set("integer", "value", "$sht(a=>response::488::invite)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_method) = $var(stats_method) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_method) = $var(stats_method) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif

		$sht(a=>response::488::invite) = 0;
	}

#!ifdef WITH_STATISTIC_INVITE_1XX
	#100 INVITE
	if($sht(a=>response::100::invite) > 0) {
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "response", "100", "$var(tmp_json)");
		jansson_set("string", "cseq", "INVITE", "$var(tmp_json)");
		jansson_set("integer", "value", "$sht(a=>response::100::invite)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_method) = $var(stats_method) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_method) = $var(stats_method) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif

		$sht(a=>response::100::invite) = 0;
	}

	#180 INVITE
	if($sht(a=>response::180::invite) > 0) {
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "response", "180", "$var(tmp_json)");
		jansson_set("string", "cseq", "INVITE", "$var(tmp_json)");
		jansson_set("integer", "value", "$sht(a=>response::180::invite)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_method) = $var(stats_method) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_method) = $var(stats_method) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif

		$sht(a=>response::180::invite) = 0;
	}

	#183 INVITE
	if($sht(a=>response::183::invite) > 0) {
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "response", "183", "$var(tmp_json)");
		jansson_set("string", "cseq", "INVITE", "$var(tmp_json)");
		jansson_set("integer", "value", "$sht(a=>response::183::invite)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_method) = $var(stats_method) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_method) = $var(stats_method) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif

		$sht(a=>response::183::invite) = 0;
	}

#!endif

	#200 INVITE
	if($sht(a=>response::200::invite) > 0) {
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "response", "200", "$var(tmp_json)");
		jansson_set("string", "cseq", "INVITE", "$var(tmp_json)");
		jansson_set("integer", "value", "$sht(a=>response::200::invite)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_method) = $var(stats_method) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_method) = $var(stats_method) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif

		$sht(a=>response::200::invite) = 0;
	}

	#407 BYE
	if($sht(a=>response::407::bye) > 0) {
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "response", "407", "$var(tmp_json)");
		jansson_set("string", "cseq", "BYE", "$var(tmp_json)");
		jansson_set("integer", "value", "$sht(a=>response::407::bye)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_method) = $var(stats_method) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_method) = $var(stats_method) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif

		$sht(a=>response::407::bye) = 0;
	}

	#401 BYE
	if($sht(a=>response::401::bye) > 0) {
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "response", "401", "$var(tmp_json)");
		jansson_set("string", "cseq", "BYE", "$var(tmp_json)");
		jansson_set("integer", "value", "$sht(a=>response::401::bye)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_method) = $var(stats_method) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_method) = $var(stats_method) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif

		$sht(a=>response::401::bye) = 0;
	}

	#200 BYE
	if($sht(a=>response::200::bye) > 0) {
		jansson_set("string", "host", "$var(host)", "$var(tmp_json)");
		jansson_set("string", "timestamp", "$var(isotime)", "$var(tmp_json)");
		jansson_set("string", "response", "200", "$var(tmp_json)");
		jansson_set("string", "cseq", "BYE", "$var(tmp_json)");
		jansson_set("integer", "value", "$sht(a=>response::200::bye)", "$var(tmp_json)");

		#!ifdef TO_ELASTIC
		$var(stats_method) = $var(stats_method) + " {\"index\": {\"_index\":\"homer-"+ $timef(%d.%m.%Y) +"\",\"_type\":\""+$var(type)+"\" }}\n";
		$var(stats_method) = $var(stats_method) + $var(tmp_json) + "\n";
		$var(tmp_json) = 0;
		#!endif

		#!ifdef TO_GRAYLOG
		jansson_set("string", "timestamp", ""+$var(gentime)+"."+$TV(u)/999+"", "$var(tmp_json)");
		jansson_set("string", "short_message", "Homer-Stats", "$var(tmp_json)");
		$var(graylog_json) = $var(tmp_json);
		$var(tmp_json) = 0;
		route(SEND_ES_DATA);
		$var(graylog_json) = 0;
		#!endif

		$sht(a=>response::200::bye) = 0;
	}

	# Send bulk method & response stats
	$var(body) = $var(stats_method);
	route(SEND_ES_DATA);

}

route[SEND_ES_DATA] {

	$http_req(suspend) = 0;
	$http_req(method) = "POST";
	$http_req(hdr) = "Content-Type: application/json; charset=UTF-8";

#!ifdef TO_GRAYLOG
	if ($var(graylog_json) == "" || $var(graylog_json) == 0 ) return;
	$var(graylogurl) = "GRAYLOG_GELF_HTTP_URL/gelf";
	http_async_query("$var(graylogurl)", "$var(graylog_json)", "ES_REPLY");
#!else
	if ($var(body) == "") return;
	$var(elasticurl) = "ELASTICSEARCH_URL/_bulk";
	http_async_query("$var(elasticurl)", "$var(body)", "ES_REPLY");
#!endif

}

route[ES_REPLY] {

	if($http_err) {
		xlog("L_ERR","route[ES_REPLY]: $http_err\n");
	} else {
		xlog("L_INFO", "route[ES_REPLY]: status $http_rs\n");
		xlog("L_INFO", "route[ES_REPLY]: body	$http_rb\n");
	}
}

route[STORE] {

		if($rm == "REGISTER") {
			$var(table) = "sip_capture_registration";
		}
		else if($rm =~ "(INVITE|UPDATE|BYE|ACK|PRACK|REFER|CANCEL)$")
		{
			$var(table) = "sip_capture_call";
		}
		else if($rm =~ "(NOTIFY)$" && is_present_hf("Event") && $hdr(Event)=~"refer;")
		{
			$var(table) = "sip_capture_call";
		}
		else if($rm =~ "(INFO)$")
		{
			$var(table) = "sip_capture_call";
		}
		else if($rm =~ "(OPTIONS)$" )
		{
			$var(table) = "sip_capture_rest";
		}
		else {
			$var(table) = "sip_capture_rest";
		}

	$var(utc) = $utimef(%Y%m%d);
	$var(a) = $var(table) + "_" + $var(utc);
	sip_capture("$var(a)");
}

event_route[sipcapture:request] {
	xlog("received sipcapture request from $si:$sp\r\n");
}
